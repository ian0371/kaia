// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/contractgov/types (interfaces: ContractGovModule)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/kaiax/headergov/types"
)

// MockContractGovModule is a mock of ContractGovModule interface.
type MockContractGovModule struct {
	ctrl     *gomock.Controller
	recorder *MockContractGovModuleMockRecorder
}

// MockContractGovModuleMockRecorder is the mock recorder for MockContractGovModule.
type MockContractGovModuleMockRecorder struct {
	mock *MockContractGovModule
}

// NewMockContractGovModule creates a new mock instance.
func NewMockContractGovModule(ctrl *gomock.Controller) *MockContractGovModule {
	mock := &MockContractGovModule{ctrl: ctrl}
	mock.recorder = &MockContractGovModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractGovModule) EXPECT() *MockContractGovModuleMockRecorder {
	return m.recorder
}

// EffectiveParamSet mocks base method.
func (m *MockContractGovModule) EffectiveParamSet(arg0 uint64) (types.ParamSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveParamSet", arg0)
	ret0, _ := ret[0].(types.ParamSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveParamSet indicates an expected call of EffectiveParamSet.
func (mr *MockContractGovModuleMockRecorder) EffectiveParamSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveParamSet", reflect.TypeOf((*MockContractGovModule)(nil).EffectiveParamSet), arg0)
}

// EffectiveParamsPartial mocks base method.
func (m *MockContractGovModule) EffectiveParamsPartial(arg0 uint64) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveParamsPartial", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveParamsPartial indicates an expected call of EffectiveParamsPartial.
func (mr *MockContractGovModuleMockRecorder) EffectiveParamsPartial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveParamsPartial", reflect.TypeOf((*MockContractGovModule)(nil).EffectiveParamsPartial), arg0)
}

// Start mocks base method.
func (m *MockContractGovModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockContractGovModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContractGovModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockContractGovModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockContractGovModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContractGovModule)(nil).Stop))
}
