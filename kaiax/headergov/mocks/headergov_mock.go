// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/headergov/types (interfaces: HeaderGovModule)
//
// Generated by this command:
//
//	mockgen -destination=kaiax/headergov/mocks/headergov_mock.go github.com/kaiachain/kaia/kaiax/headergov/types HeaderGovModule
//

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	types "github.com/kaiachain/kaia/blockchain/types"
	types0 "github.com/kaiachain/kaia/kaiax/headergov/types"
	rpc "github.com/kaiachain/kaia/networks/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockHeaderGovModule is a mock of HeaderGovModule interface.
type MockHeaderGovModule struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderGovModuleMockRecorder
}

// MockHeaderGovModuleMockRecorder is the mock recorder for MockHeaderGovModule.
type MockHeaderGovModuleMockRecorder struct {
	mock *MockHeaderGovModule
}

// NewMockHeaderGovModule creates a new mock instance.
func NewMockHeaderGovModule(ctrl *gomock.Controller) *MockHeaderGovModule {
	mock := &MockHeaderGovModule{ctrl: ctrl}
	mock.recorder = &MockHeaderGovModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderGovModule) EXPECT() *MockHeaderGovModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockHeaderGovModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockHeaderGovModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockHeaderGovModule)(nil).APIs))
}

// EffectiveParamSet mocks base method.
func (m *MockHeaderGovModule) EffectiveParamSet(arg0 uint64) (types0.ParamSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveParamSet", arg0)
	ret0, _ := ret[0].(types0.ParamSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveParamSet indicates an expected call of EffectiveParamSet.
func (mr *MockHeaderGovModuleMockRecorder) EffectiveParamSet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveParamSet", reflect.TypeOf((*MockHeaderGovModule)(nil).EffectiveParamSet), arg0)
}

// FinalizeBlock mocks base method.
func (m *MockHeaderGovModule) FinalizeBlock(arg0 *types.Block) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeBlock", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeBlock indicates an expected call of FinalizeBlock.
func (mr *MockHeaderGovModuleMockRecorder) FinalizeBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeBlock", reflect.TypeOf((*MockHeaderGovModule)(nil).FinalizeBlock), arg0)
}

// PostInsertBlock mocks base method.
func (m *MockHeaderGovModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockHeaderGovModuleMockRecorder) PostInsertBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockHeaderGovModule)(nil).PostInsertBlock), arg0)
}

// PrepareHeader mocks base method.
func (m *MockHeaderGovModule) PrepareHeader(arg0 *types.Header) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHeader", arg0)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareHeader indicates an expected call of PrepareHeader.
func (mr *MockHeaderGovModuleMockRecorder) PrepareHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHeader", reflect.TypeOf((*MockHeaderGovModule)(nil).PrepareHeader), arg0)
}

// Start mocks base method.
func (m *MockHeaderGovModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHeaderGovModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHeaderGovModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockHeaderGovModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHeaderGovModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHeaderGovModule)(nil).Stop))
}

// Unwind mocks base method.
func (m *MockHeaderGovModule) Unwind(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwind indicates an expected call of Unwind.
func (mr *MockHeaderGovModuleMockRecorder) Unwind(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwind", reflect.TypeOf((*MockHeaderGovModule)(nil).Unwind), arg0)
}

// VerifyHeader mocks base method.
func (m *MockHeaderGovModule) VerifyHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader.
func (mr *MockHeaderGovModuleMockRecorder) VerifyHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockHeaderGovModule)(nil).VerifyHeader), arg0)
}
